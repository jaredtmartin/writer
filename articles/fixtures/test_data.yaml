- fields: {name: Small Project, owner: 1}
  model: articles.project
  pk: 1
- fields: {name: Large Project, owner: 1}
  model: articles.project
  pk: 2
- fields: {approved: null, article_notes: '', article_type: 1, body: "<h3>autoescape</h3>\r\
      \n\r\n<p>Controls the current auto-escaping behavior. This tag takes either\
      \ <tt class=\"docutils literal\"><span class=\"pre\">on</span></tt> or <tt class=\"\
      docutils literal\"><span class=\"pre\">off</span></tt> as an argument and that\
      \ determines whether auto-escaping is in effect inside the block. The block\
      \ is closed with an <tt class=\"docutils literal\"><span class=\"pre\">endautoescape</span></tt>\
      \ ending tag.</p>\r\n\r\n<p>When auto-escaping is in effect, all variable content\
      \ has HTML escaping applied to it before placing the result into the output\
      \ (but after any filters have been applied). This is equivalent to manually\
      \ applying the <a class=\"reference internal\" href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-escape\"\
      ><tt class=\"xref std std-tfilter docutils literal\"><span class=\"pre\">escape</span></tt></a>\
      \ filter to each variable.</p>\r\n\r\n<p>The only exceptions are variables that\
      \ are already marked as &ldquo;safe&rdquo; from escaping, either by the code\
      \ that populated the variable, or because it has had the <a class=\"reference\
      \ internal\" href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-safe\"\
      ><tt class=\"xref std std-tfilter docutils literal\"><span class=\"pre\">safe</span></tt></a>\
      \ or <a class=\"reference internal\" href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-escape\"\
      ><tt class=\"xref std std-tfilter docutils literal\"><span class=\"pre\">escape</span></tt></a>\
      \ filters applied. Thompson</p>\r\n\r\n<h3>autoescape</h3>\r\n\r\n<p>Controls\
      \ the current auto-escaping behavior. This tag takes either <tt class=\"docutils\
      \ literal\"><span class=\"pre\">on</span></tt> or <tt class=\"docutils literal\"\
      ><span class=\"pre\">off</span></tt> as an argument and that determines whether\
      \ auto-escaping is in effect inside the block. The block is closed with an <tt\
      \ class=\"docutils literal\"><span class=\"pre\">endautoescape</span></tt> ending\
      \ tag.</p>\r\n\r\n<p>When auto-escaping is in effect, all variable content has\
      \ HTML escaping applied to it before placing the result into the output (but\
      \ after any filters have been applied). This is equivalent to manually applying\
      \ the <a class=\"reference internal\" href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-escape\"\
      ><tt class=\"xref std std-tfilter docutils literal\"><span class=\"pre\">escape</span></tt></a>\
      \ filter to each variable.</p>\r\n\r\n<p>The only exceptions are variables that\
      \ are already marked as &ldquo;safe&rdquo; from escaping, either by the code\
      \ that populated the variable, or because it has had the <a class=\"reference\
      \ internal\" href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-safe\"\
      ><tt class=\"xref std std-tfilter docutils literal\"><span class=\"pre\">safe</span></tt></a>\
      \ or <a class=\"reference internal\" href=\"https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-escape\"\
      ><tt class=\"xref std std-tfilter docutils literal\"><span class=\"pre\">escape</span></tt></a>\
      \ filters applied.</p>\r\n", category: null, deleted: false, description: '',
    expires: null, language: en, last_action: null, maximum: 0, minimum: 100, owner: 1,
    price: '', priority: 1, project: 1, published: null, purpose: '', referrals: '',
    rejected: null, review_notes: '', reviewer: null, reviewer_availability: Nobody,
    status: Submitted, style: '', submitted: null, tags: '', title: This is a Test,
    writer: 1, writer_availability: Nobody}
  model: articles.article
  pk: 1
- fields: {approved: null, article_notes: '', article_type: 1, body: '', category: null,
    deleted: false, description: '', expires: null, language: en, last_action: null,
    maximum: 0, minimum: 100, owner: 1, price: '', priority: 1, project: 1, published: null,
    purpose: '', referrals: '', rejected: null, review_notes: '', reviewer: null,
    reviewer_availability: Nobody, status: Unassigned, style: '', submitted: null,
    tags: '', title: '', writer: null, writer_availability: Nobody}
  model: articles.article
  pk: 2
- fields: {article: 1, keyword: Thompson, times: 1, url: www.google.com}
  model: articles.keyword
  pk: 1
- fields: {article: 2, keyword: Johnson, times: 1, url: www.google.com}
  model: articles.keyword
  pk: 2
- fields:
    date_joined: 2013-02-11 03:11:32+00:00
    email: 'ralph@gmail.com'
    first_name: 'Ralph'
    groups: []
    is_active: true
    is_staff: false
    is_superuser: false
    last_login: 2013-02-11 03:11:32+00:00
    last_name: 'Writer'
    password: pbkdf2_sha256$10000$9artnjluCTkF$zPZk0n3VSnqoAHkoI4RbAuMVq0hTWQzj3wA4fyUQu0s=
    user_permissions: []
    username: writer
  model: auth.user
  pk: 2
- fields:
    date_joined: 2013-02-11 03:11:48+00:00
    email: 'joe@gmail.com'
    first_name: 'Joe'
    groups: []
    is_active: true
    is_staff: false
    is_superuser: false
    last_login: 2013-02-11 03:11:48+00:00
    last_name: 'Requester'
    password: pbkdf2_sha256$10000$ovoHgRxZ9Dvs$6CxdV3o+Edfad1z5B8o5BLwLW4iLVIbulySaz/2ib9M=
    user_permissions: []
    username: requester
  model: auth.user
  pk: 3
- fields:
    date_joined: 2013-02-11 03:11:48+00:00
    email: ''
    first_name: 'Fred'
    groups: []
    is_active: true
    is_staff: false
    is_superuser: false
    last_login: 2013-02-11 03:11:48+00:00
    last_name: 'Reviewer'
    password: pbkdf2_sha256$10000$fjSbFnW4uleX$g07403tGh5NJiYpVB6/TCh3gEW4sHYJG10uwDfg7Qag=
    user_permissions: []
    username: fred
  model: auth.user
  pk: 4